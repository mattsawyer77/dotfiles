linters-settings:
  exhaustive:
    # check switch statements in generated files also
    check-generated: false
    # indicates that switch statements are to be considered exhaustive if a
    # 'default' case is present, even if all enum members aren't listed in the
    # switch
    default-signifies-exhaustive: true

  errcheck:
    check-type-assertions: true
  goconst:
    min-len: 2
    min-occurrences: 3
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - unnamedResult
      - paramTypeCombine
      - appendAssign
  gomnd:
    settings:
      mnd:
        # the list of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
        checks: argument,case,condition,operation,return,assign
        ignored-numbers: 0,1,2,3,4,8,16,32,64,128,256,512,10,100,1000,1024
        # ignored-files: magic_.*.go
        # ignored-functions: math.*
  govet:
    check-shadowing: false
    enable-all: false
    enable:
      # - asmdecl      # report mismatches between assembly files and Go declarations
      - assign       # check for useless assignments
      - atomic       # check for common mistakes using the sync/atomic package
      - bools        # check for common mistakes involving boolean operators
      # - buildtag     # check that +build tags are well-formed and correctly located
      # - cgocall      # detect some violations of the cgo pointer passing rules
      - composites   # check for unkeyed composite literals
      - copylocks    # check for locks erroneously passed by value
      - errorsas     # report passing non-pointer or non-error values to errors.As
      - framepointer # report assembly that clobbers the frame pointer before saving it
      # - httpresponse # check for mistakes using HTTP responses
      - ifaceassert  # detect impossible interface-to-interface type assertions
      - loopclosure  # check references to loop variables from within nested functions
      - lostcancel   # check cancel func returned by context.WithCancel is called
      - nilfunc      # check for useless comparisons between functions and nil
      - printf       # check consistency of Printf format strings and arguments
      - shift        # check for shifts that equal or exceed the width of the integer
      - stdmethods   # check signature of methods of well-known interfaces
      - stringintconv # check for string(int) conversions
      # - structtag    # check that struct field tags conform to reflect.StructTag.Get
      - testinggoroutine # report calls to (*testing.T).Fatal from goroutines started by a test.
      - tests        # check for common mistaken usages of tests and examples
      - unmarshal    # report passing non-pointer or non-interface values to unmarshal
      - unreachable  # check for unreachable code
      - unsafeptr    # check for invalid conversions of uintptr to unsafe.Pointer
      - unusedresult # check for unused results of calls to some functions  nolintlint:
  revive:
    # see https://github.com/mgechev/revive#available-rules for details.
    ignore-generated-header: true
    # severity: warning
    rule:
      var-naming:
        disabled: true
  # wsl:
  #   # See https://github.com/bombsimon/wsl/blob/master/doc/configuration.md for
  #   # documentation of available settings. These are the defaults for
  #   # `golangci-lint`.
  #   allow-assign-and-anything: false
  #   allow-assign-and-call: true
  #   allow-cuddle-declarations: false
  #   allow-multiline-assign: true
  #   allow-separated-leading-comment: false
  #   allow-trailing-comment: true
  #   force-case-trailing-whitespace: 0
  #   force-err-cuddling: false
  #   force-short-decl-cuddling: false
  #   strict-append: true
  #   require-specific: true

linters:
  disable-all: true
  enable:
    - bodyclose
    - deadcode
    - depguard
    - dogsled
    - dupl
    # - errcheck
    - exhaustive
    - exportloopref
    - goconst
    - gocritic
    - gocyclo
    - gofmt
    - goimports
    - gomnd
    - gosec
    - gosimple
    - govet
    - ineffassign
    - misspell
    - nakedret
    - nolintlint
    - predeclared
    - revive
    - staticcheck
    - structcheck
    - tparallel
    - unconvert
    - unparam
    - varcheck
    - whitespace
    # - wsl

run:
  allow-parallel-runners: true
  concurrency: 8
  issues-exit-code: 1
  skip-files:
    - pbgo
    - extschema
    - vendor

issues:
  fix: false
  exclude:
    - var-naming
    - error-strings
    - S1008
    - SA2002
    - typecheck
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - goconst
        - gomnd

severity:
  # Default value is empty string.
  # Set the default severity for issues. If severity rules are defined and the issues
  # do not match or no severity is provided to the rule this will be the default
  # severity applied. Severities should match the supported severity names of the
  # selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # -   Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
  # -       Github: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  default-severity: error

  # The default value is false.
  # If set to true severity-rules regular expressions become case sensitive.
  case-sensitive: false

  # Default value is empty list.
  # When a list of severity rules are provided, severity information will be added to lint
  # issues. Severity rules have the same filtering capability as exclude rules except you
  # are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  rules:
    - severity: error
      text: builtinShadow
    - severity: warning
      linters:
        - unparam
        - structcheck
        - unconvert
    - severity: info
      linters:
        - gocritic
        - gomnd
